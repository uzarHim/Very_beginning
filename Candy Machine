import pandas as pd
import pyodbc

# --- All connection logic has been REMOVED from this file. ---
# It will now use the connection object passed from app.py.

# --- Function for "Static Info" Tab ---
def run_static_info_check(conn, id_type, id_code, report_date):
    """Builds and runs a dynamic query using the provided database connection."""
    
    # This dictionary maps the dropdown value to your actual DB column names.
    # --- YOU MUST UPDATE THESE COLUMN NAMES TO MATCH YOUR DATABASE TABLE ---
    column_mapping = {
        'Asset Control ID': 'AssetControlID', 'RIC': 'RIC_Code', 'Sedol': 'SedolIdentifier',
        'Bloomberg': 'BloombergTicker', 'CUSIP': 'CUSIP', 'MARS': 'MarsCode', 'ESMP': 'ESMP_ID'
    }

    where_clauses = []
    
    if id_type.upper() == 'ALL':
        for col_name in column_mapping.values():
            where_clauses.append(f"[{col_name}] = '{id_code}'")
        where_condition = " OR ".join(where_clauses)
    elif id_type in column_mapping:
        column_name = column_mapping[id_type]
        where_condition = f"[{column_name}] = '{id_code}'"
    else:
        return f"ERROR: Invalid ID Type selected: {id_type}"

    sql_query = f"""
        SELECT TOP 100 AssetControlID, RIC_Code, SedolIdentifier, AssetName, CountryOfRisk
        FROM YourStaticInfoTableName
        WHERE {where_condition}
        AND ValuationDate = '{report_date.replace('-', '')}'
    """
    
    print(f"Executing Static Info Query:\n{sql_query}")
    try:
        df = pd.read_sql(sql_query, conn)
        return df.to_string(index=False) if not df.empty else "No results found."
    except Exception as e:
        return f"Database Error: {e}"


# --- Function for "Atlas Full reval proxy" Tab ---
def run_atlas_proxy_check(conn, proxy_type, code, report_date):
    """Builds and runs a query for Atlas proxy info."""
    
    if proxy_type == 'RF which is proxied':
        column_name = 'OriginalRiskFactor'
    elif proxy_type == 'RF on which proxied':
        column_name = 'ProxiedRiskFactor'
    else:
        return f"ERROR: Invalid Proxy Type selected: {proxy_type}"

    sql_query = f"""
        SELECT OriginalRiskFactor, ProxiedRiskFactor, ProxyDate, ProxyReason
        FROM YourAtlasProxyTableName
        WHERE [{column_name}] = '{code}'
    """
    
    print(f"Executing Atlas Proxy Query:\n{sql_query}")
    try:
        df = pd.read_sql(sql_query, conn)
        return df.to_string(index=False) if not df.empty else "No results found."
    except Exception as e:
        return f"Database Error: {e}"


# --- Function for "SRA PnL mapping" Tab ---
def run_sra_pnl_check(conn, id_type, code, report_date):
    """Builds and runs a query for SRA PnL mapping."""
    
    column_mapping = {
        'Asset Identifier': 'AssetIdentifier', 'AssetId': 'InternalAssetID',
        'AssetControlId': 'ACID', 'Country': 'CountryCode'
    }

    if id_type in column_mapping:
        column_name = column_mapping[id_type]
    else:
        return f"ERROR: Invalid Identifier Type selected: {id_type}"

    sql_query = f"""
        SELECT AssetIdentifier, PnL_Account, SRA_Book, MappingOwner
        FROM YourSraPnlMappingTableName
        WHERE [{column_name}] = '{code}'
    """

    print(f"Executing SRA PnL Query:\n{sql_query}")
    try:
        df = pd.read_sql(sql_query, conn)
        return df.to_string(index=False) if not df.empty else "No results found."
    except Exception as e:
        return f"Database Error: {e}"

