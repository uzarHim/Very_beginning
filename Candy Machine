import pandas as pd
import os
import glob
import difflib
from datetime import datetime

def _read_regional_data(region, report_date, file_path, messages):
    """
    Helper function to read and combine regional CSV files.
    Returns a single DataFrame and any notification messages.
    """
    date_yyyymmdd = datetime.strptime(report_date, "%Y-%m-%d").strftime("%Y%m%d")
    
    regions_to_check = []
    if region == 'ALL':
        regions_to_check = ['APAC', 'EMEA', 'AMER']
    else:
        regions_to_check = [region]

    all_dfs = []
    for reg in regions_to_check:
        search_pattern = os.path.join(file_path, f"{reg}_{date_yyyymmdd}*.csv")
        found_files = glob.glob(search_pattern)

        if not found_files:
            messages.append(f"INFO: No files found for region '{reg}' with pattern '{reg}_{date_yyyymmdd}*.csv'")
            continue

        found_files.sort(key=os.path.getmtime, reverse=True)
        latest_file = found_files[0]
        
        messages.append(f"INFO: Reading latest file for region '{reg}': {os.path.basename(latest_file)}")
        if len(found_files) > 1:
            messages.append(f"WARNING: Found {len(found_files)} matching files for '{reg}'. Using the newest one.")
            messages.append("  All files found:")
            for f in found_files:
                messages.append(f"  - {os.path.basename(f)}")
        
        try:
            df = pd.read_csv(latest_file)
            # Add a 'Region' column to know where the data came from
            df['Region'] = reg 
            all_dfs.append(df)
        except Exception as e:
            messages.append(f"ERROR: Could not read file {os.path.basename(latest_file)}. Reason: {e}")

    if not all_dfs:
        return pd.DataFrame()

    return pd.concat(all_dfs, ignore_index=True)


def run_weights_check(index_etf, constituent, region, report_date):
    """
    Performs a flexible search for index and constituent weights based on user input.
    """
    output_messages = []
    # --- IMPORTANT: Change this to the actual path where your CSV files are stored ---
    file_path = "C:\\path\\to\\your\\data\\folder"
    
    # Ensure inputs are strings to prevent errors
    index_etf = str(index_etf).strip() if index_etf else ""
    constituent = str(constituent).strip() if constituent else ""
    
    df = _read_regional_data(region, report_date, file_path, output_messages)

    if df.empty:
        output_messages.append("\nERROR: No data loaded. Please check file paths and dates.")
        return "\n".join(output_messages)

    # --- NEW LOGIC: Handle the 3 different search scenarios ---

    # Scenario 1: Both Index and Constituent are provided
    if index_etf and constituent:
        output_messages.append(f"\nSearching for Constituent '{constituent}' within Index '{index_etf}'...")
        result_df = df[
            (df['Index'].str.contains(index_etf, case=False, na=False)) &
            (df['Constituent'].str.contains(constituent, case=False, na=False))
        ]
        if not result_df.empty:
            output_messages.append("\n--- Found Match ---")
            output_messages.append(result_df[['Region', 'Index', 'Constituent', 'Weight']].to_string(index=False))
        else:
            output_messages.append(f"\n--- No Match Found ---")
            output_messages.append(f"Could not find constituent '{constituent}' in index '{index_etf}'.")

    # Scenario 2: Only Index is provided
    elif index_etf:
        output_messages.append(f"\nListing all constituents for Index matching '{index_etf}'...")
        result_df = df[df['Index'].str.contains(index_etf, case=False, na=False)]
        if not result_df.empty:
            output_messages.append("\n--- Found Constituents ---")
            output_messages.append(result_df[['Region', 'Constituent', 'Weight']].to_string(index=False))
        else:
            output_messages.append(f"\n--- No Match Found ---")
            output_messages.append(f"Could not find any index matching '{index_etf}'.")
            
    # Scenario 3: Only Constituent is provided
    elif constituent:
        output_messages.append(f"\nSearching for all index memberships for Constituent '{constituent}'...")
        result_df = df[df['Constituent'].str.contains(constituent, case=False, na=False)]
        if not result_df.empty:
            output_messages.append("\n--- Found Memberships ---")
            output_messages.append(result_df[['Region', 'Index', 'Weight']].to_string(index=False))
        else:
            output_messages.append(f"\n--- No Match Found ---")
            output_messages.append(f"Could not find any constituent matching '{constituent}'.")

    # Scenario 4: No input provided
    else:
        output_messages.append("\n--- No Input ---")
        output_messages.append("Please provide an Index/ETF, a Constituent, or both to search.")

    return "\n".join(output_messages)

# This block allows you to test the script directly
if __name__ == '__main__':
    # You would need to create dummy CSV files in the specified path for this to work
    print("--- Testing Scenario 1 (Both) ---")
    print(run_weights_check("S&P 500", "AAPL", "AMER", "2025-09-18"))
    
    print("\n--- Testing Scenario 2 (Index Only) ---")
    print(run_weights_check("S&P 500", "", "AMER", "2025-09-18"))
    
    print("\n--- Testing Scenario 3 (Constituent Only) ---")
    print(run_weights_check("", "AAPL", "ALL", "2025-09-18"))
