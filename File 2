from flask import Flask, request, render_template
from datetime import datetime
import pyodbc

# --- Import all your functions from your separate script files ---
# Ensure these filenames and function names match your project
from sra_monitoring_script import run_sra_monitoring
from adjustment_script import run_adjustment_monitoring
from weights_script import run_weights_check
from mqt_var_script import run_mqt_var_check
from exclusion_check_script import run_exclusion_check
from risk_factor_script import run_static_info_check, run_atlas_proxy_check, run_sra_pnl_check

# --- 1. CREATE A SINGLE, SHARED DATABASE CONNECTION ---
# IMPORTANT: Replace this with your actual, secure connection string.
DB_CONNECTION_STRING = (
    "DRIVER={ODBC Driver 17 for SQL Server};"
    "SERVER=your_server_name;"
    "DATABASE=your_database_name;"
    "UID=your_username;"
    "PWD=your_password;"
)
try:
    conn = pyodbc.connect(DB_CONNECTION_STRING)
    print("Database connection successful.")
except Exception as e:
    print(f"FATAL: DATABASE CONNECTION FAILED. The server will not start. Error: {e}")
    conn = None # Set conn to None if connection fails

app = Flask(__name__)

@app.route("/")
def index():
    # Pass an empty dictionary on the first page load to prevent errors
    return render_template("dashboard.html", request_form={})

# --- ALL ROUTES ARE NOW COMPLETE AND CALL THEIR REAL SCRIPTS ---

@app.route("/run_sra_monitoring", methods=["POST"])
def handle_sra_monitoring():
    request_form_data = request.form.to_dict(flat=False)
    report_date = request.form.get("report_date")
    asset_class = request.form.get("asset_class")
    output_message = run_sra_monitoring(conn, asset_class, report_date)
    return render_template("dashboard.html", sra_output=output_message, request_form=request_form_data)

@app.route("/run_adjustment_monitoring", methods=["POST"])
def handle_adjustment_monitoring():
    request_form_data = request.form.to_dict(flat=False)
    report_date = request.form.get("report_date")
    adjustment_id = request.form.get("adjustment_id")
    output_message = run_adjustment_monitoring(conn, adjustment_id, report_date)
    return render_template("dashboard.html", adjustment_output=output_message, request_form=request_form_data)

@app.route("/run_weights_check", methods=["POST"])
def handle_weights_check():
    request_form_data = request.form.to_dict(flat=False)
    report_date = request.form.get("report_date")
    index_etf = request.form.get("index_etf")
    constituent = request.form.get("constituent")
    region = request.form.get("region")
    
    # Read the state of each checkbox
    is_index_exact = request.form.get("index_exact_match") == "true"
    is_constituent_exact = request.form.get("constituent_exact_match") == "true"

    output_message = run_weights_check(
        index_etf=index_etf, 
        constituent=constituent, 
        region=region, 
        report_date=report_date,
        is_index_exact=is_index_exact,
        is_constituent_exact=is_constituent_exact
    )
    return render_template("dashboard.html", weights_output=output_message, request_form=request_form_data)

@app.route("/run_var_figures", methods=["POST"])
def handle_var_figures():
    request_form_data = request.form.to_dict(flat=False)
    report_date_yyyymmdd = datetime.strptime(request.form.get("report_date"), "%Y-%m-%d").strftime("%Y%m%d")
    node = request.form.get("node")
    var_types = request.form.getlist("var_type")
    confidence_interval = request.form.get("confidence_interval")
    results_dict = run_mqt_var_check(conn, node, report_date_yyyymmdd, confidence_interval, var_types)
    return render_template("dashboard.html", mqt_output=results_dict, request_form=request_form_data)

@app.route("/run_exclusion_check", methods=["POST"])
def handle_exclusion_check():
    request_form_data = request.form.to_dict(flat=False)
    report_date = request.form.get("report_date")
    feed = request.form.get("feed")
    book = request.form.get("book")
    
    # Read the state of the new checkboxes for exclusion check
    is_feed_exact = request.form.get("feed_exact_match") == "true"
    is_book_exact = request.form.get("book_exact_match") == "true"
    
    output_message = run_exclusion_check(
        conn=conn, 
        feed=feed, 
        book=book, 
        report_date=report_date,
        is_feed_exact=is_feed_exact,
        is_book_exact=is_book_exact
    )
    return render_template("dashboard.html", exclusion_output=output_message, request_form=request_form_data)

# --- ROUTES FOR THE RISK FACTOR SUB-TABS ---

@app.route("/run_static_info", methods=["POST"])
def handle_static_info():
    request_form_data = request.form.to_dict(flat=False)
    report_date = request.form.get("report_date")
    id_type = request.form.get("id_type")
    id_code = request.form.get("id_code")
    output_message = run_static_info_check(conn, id_type, id_code, report_date)
    return render_template("dashboard.html", risk_factor_output=output_message, request_form=request_form_data)

@app.route("/run_atlas_proxy", methods=["POST"])
def handle_atlas_proxy():
    request_form_data = request.form.to_dict(flat=False)
    report_date = request.form.get("report_date")
    proxy_type = request.form.get("atlas_rf_type")
    code = request.form.get("atlas_rf_code")
    output_message = run_atlas_proxy_check(conn, proxy_type, code, report_date)
    return render_template("dashboard.html", risk_factor_output=output_message, request_form=request_form_data)

@app.route("/run_sra_pnl", methods=["POST"])
def handle_sra_pnl():
    request_form_data = request.form.to_dict(flat=False)
    report_date = request.form.get("report_date")
    id_type = request.form.get("sra_id_type")
    code = request.form.get("sra_id_code")
    output_message = run_sra_pnl_check(conn, id_type, code, report_date)
    return render_template("dashboard.html", risk_factor_output=output_message, request_form=request_form_data)

if __name__ == "__main__":
    if conn:
        from waitress import serve
        print("Server running at http://0.0.0.0:8080")
        serve(app, host="0.0.0.0", port=8080)
    else:
        print("Could not start server due to database connection failure. Please check your DB_CONNECTION_STRING.")

